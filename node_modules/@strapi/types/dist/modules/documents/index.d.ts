import type { UID } from '@strapi/types/src';
import type * as Middleware from '@strapi/types/src/modules/documents/middleware';
import type { ServiceInstance } from '@strapi/types/src/modules/documents/service-instance';
import type { AnyDocument } from '@strapi/types/src/modules/documents/result';
import type { ComponentExtension } from '@strapi/types/src/modules/documents/component-extension';
export * as Middleware from '@strapi/types/src/modules/documents/middleware';
export * as Params from '@strapi/types/src/modules/documents/params';
export * from '@strapi/types/src/modules/documents/plugin';
export * from '@strapi/types/src/modules/documents/result';
export * from '@strapi/types/src/modules/documents/service-instance';
export type ID = string;
type ServiceUtils = {
    transformData: (data: any, opts: any) => Promise<AnyDocument>;
};
export type Service = {
    <TContentTypeUID extends UID.ContentType>(uid: TContentTypeUID): ServiceInstance<TContentTypeUID> & ComponentExtension<TContentTypeUID>;
    utils: ServiceUtils;
    /** Add a middleware for all uid's and a specific action
     *  @example - Add a default locale
     *  strapi.documents.use((ctx, next) => {
     *    if (!params.locale) params.locale = 'en'
     *    return next()
     *  })
     */
    use: (cb: Middleware.Middleware) => Service;
};
//# sourceMappingURL=index.d.ts.map